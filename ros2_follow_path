#!/usr/bin/env python3

import rclpy
import threading
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist, Point
from math import pow, atan2, sqrt, sin, cos, pi

WAYPOINTS = [Point(x=0.0, y=0.0, z=0.0),
            Point(x=4.0, y=0.0, z=0.0),
            Point(x=4.0, y=4.0, z=0.0),
            Point(x=0.0, y=4.0, z=0.0),
            Point(x=0.0, y=0.0, z=0.0)]


class TurtleBot(Node):

    def __init__(self):
        super().__init__('turtlebot_controller')

        # Update this to the topic where TurtleBot's position is published
        self.pose_subscription = self.create_subscription(Odometry, '/odom', self.update_pose, 10)
        
        # Update this to the topic where you command velocity to TurtleBot
        self.velocity_publisher = self.create_publisher(Twist, '/cmd_vel', 10)

        self.pose = Point()  # Using Point instead of Pose for simplicity
        self.theta = 0.0  # Store yaw separately
        self.get_logger().info('TurtleBot Node Initialized')
    
    def follow_path(self):
        for idx, waypoint in enumerate(WAYPOINTS[:-1]):  # Exclude the last waypoint for now
            next_waypoint = WAYPOINTS[idx + 1]
            desired_theta = atan2(next_waypoint.y - waypoint.y, next_waypoint.x - waypoint.x)
            desired_theta = atan2(sin(desired_theta), cos(desired_theta)) # normalization
            self.move2goal(waypoint, desired_theta)

        # For the last waypoint, just move to the position without a specific orientation
        self.move2goal(WAYPOINTS[-1])


    def update_pose(self, data):
        self.pose = data.pose.pose.position  # Extracting position
        self.theta = 2 * atan2(data.pose.pose.orientation.z, data.pose.pose.orientation.w)  # Extracting yaw

    def euclidean_distance(self, goal_pose):
        return sqrt(pow((goal_pose.x - self.pose.x), 2) +
                    pow((goal_pose.y - self.pose.y), 2))
    
    def linear_vel(self, goal_pose, constant=2):
        desired_velocity = constant * self.euclidean_distance(goal_pose)
        max_velocity = 0.25
        return min(desired_velocity, max_velocity)
    
    def steering_angle(self, goal_pose):
        return atan2(goal_pose.y - self.pose.y, goal_pose.x - self.pose.x)
    
    def angular_vel(self, goal_pose, constant=0.7):
        goal_theta = self.steering_angle(goal_pose)
        angle_error = goal_theta - self.theta
        
        # Normalize angle to the range [-pi, pi]
        angle_error = atan2(sin(angle_error), cos(angle_error))
        desired_angular_velocity = constant * angle_error

        # Limit the angular velocity to the maximum value
        max_angular_velocity = 2
        if desired_angular_velocity > 0:
            angular_velocity = min(desired_angular_velocity, max_angular_velocity)
        else:
            angular_velocity = max(desired_angular_velocity, -max_angular_velocity)

        return float(angular_velocity)
    

    def move2goal(self, goal_pose, goal_theta=None):
        """Moves the turtle to the goal."""
        distance_tolerance = 0.1
        orientation_tolerance = 0.15

        vel_msg = Twist()

        # Go-to-goal part
        while self.euclidean_distance(goal_pose) >= distance_tolerance and rclpy.ok():
            vel_msg.linear.x = self.linear_vel(goal_pose)
            vel_msg.angular.z = self.angular_vel(goal_pose)
            self.velocity_publisher.publish(vel_msg)

        # Stop the robot after reaching the goal position
        vel_msg.linear.x = 0.0
        vel_msg.angular.z = 0.0
        self.velocity_publisher.publish(vel_msg)
        self.get_logger().info("Goal position reached!")

        # Orientation part
        if goal_theta is not None:
            while rclpy.ok():  # Using rclpy.ok() here to ensure ROS is still running
                orientation_error = goal_theta - self.theta
                orientation_error = atan2(sin(orientation_error), cos(orientation_error))  # normalize the angle

                if abs(orientation_error) < orientation_tolerance:
                    break
                else:
                    orientation_constant = 2
                    vel_msg.angular.z = orientation_constant * orientation_error
                    self.velocity_publisher.publish(vel_msg)

            # Stop the robot after reaching the orientation goal
            vel_msg.angular.z = 0.0
            self.velocity_publisher.publish(vel_msg)
            self.get_logger().info("Goal orientation reached!")


def main(args=None):
    rclpy.init(args=args)
    turtlebot_controller = TurtleBot()

    # Start move2goal in a separate thread before spinning
    move_thread = threading.Thread(target=turtlebot_controller.follow_path)
    move_thread.start()

    # This will keep the program running and calling the callback function
    rclpy.spin(turtlebot_controller)

    # Wait for move2goal to finish
    move_thread.join()

    turtlebot_controller.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()